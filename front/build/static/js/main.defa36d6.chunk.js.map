{"version":3,"sources":["components/TransactionComponent.js","components/TransactionHistory.js","App.js","serviceWorker.js","index.js"],"names":["TransactionComponent","state","amount","negativeError","type","handleAmount","event","target","value","_this","setState","prevState","Object","objectSpread","handleSelect","checkDisabled","_this$state","submit","e","preventDefault","_this$state2","sendTransaction","props","_this$state3","this","react_default","a","createElement","react","Row","Col","md","span","offset","className","Form","Group","controlId","Control","placeholder","onChange","min","Text","Label","as","Button","variant","disabled","onClick","Component","TransactionHistory","_ref","history","Accordion","map","transaction","Card","key","_id","Header","Toggle","eventKey","effectiveDate","Collapse","Body","ListGroup","Item","App","loading","balance","error","_callee","_ref2","data","regenerator_default","wrap","_context","prev","next","axios","post","parseFloat","sent","toConsumableArray","unshift","t0","response","message","stop","get","length","_context2","Container","Alert","Heading","TransactionComponent_TransactionComponent","components_TransactionHistory","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.defa36d6.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\n\nexport default class TransactionComponent extends Component{\n    state ={\n        amount: 0,\n        negativeError: false,\n        type: null\n    }\n    handleAmount = event => {\n        let amount = event.target.value;\n        let negativeError = false;\n        if(amount < 0) {\n            negativeError=true;\n        }\n        this.setState(prevState =>({\n            ...prevState,\n            amount,\n            negativeError\n        }))\n    }\n    handleSelect = event => {\n        let type = event.target.value;\n        if(type === 'select') type = null;\n        this.setState(prevState =>({\n            ...prevState,\n            type\n        }))\n    }\n    checkDisabled = () => {\n        const { amount , negativeError, type } = this.state;\n        return (!amount || amount === ''|| negativeError || !type);\n    }\n    submit = e =>{\n        e.preventDefault();\n        const { amount , type } = this.state;\n        const { sendTransaction } = this.props;\n        sendTransaction( {\n            amount,\n            type\n        })\n        return this.setState(prevState =>({\n            amount : 0,\n            negativeError: false\n        }))\n    }\n    render(){\n        const { amount, negativeError} = this.state;\n        return(\n            <Fragment>\n                <Row>\n                    <Col md={{ span: 6, offset: 3 }}>\n                        <h2 className=\"title\">\n                            New Transaction\n                        </h2>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ span: 6, offset: 3 }}>\n                        <Form>\n                            <Form.Group controlId=\"formBasicEmail\">\n                                <Form.Control type=\"number\" placeholder=\"Amount\" onChange={this.handleAmount} value={amount} min=\"0\"/>\n                                { negativeError && (\n                                    <Form.Text className=\"error\"> negatives number forbidden</Form.Text>\n                                )}\n                            </Form.Group>\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label>Type</Form.Label>\n                                <Form.Control as=\"select\" onChange={this.handleSelect}>\n                                    <option>select</option>\n                                    <option>debit</option>\n                                    <option>credit</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Button variant=\"primary\" type=\"submit\" disabled={this.checkDisabled()} onClick={this.submit}>Submit</Button>\n                        </Form>\n                    </Col>\n                </Row>\n            </Fragment>\n        )\n    }\n}","import React, { Fragment }from 'react';\nimport { Accordion, Card, Button, ListGroup} from \"react-bootstrap\";\n\n\nconst TransactionHistory = ({history}) => {\n    return (\n        <Fragment>\n            <h3>Transaction History</h3>\n            <Accordion>\n                {\n                    history.map(transaction => (\n                        <Card key={transaction._id}>\n                            <Card.Header>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey={transaction._id}>\n                                    Transaction Date: {transaction.effectiveDate}\n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey={transaction._id}>\n                                <Card.Body>\n                                    <ListGroup>\n                                        <ListGroup.Item>Type: {transaction.type}</ListGroup.Item>\n                                        <ListGroup.Item>Amount: {transaction.amount}</ListGroup.Item>\n                                    </ListGroup>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    ))\n                }\n            </Accordion>\n        </Fragment>\n    )\n}\n\nexport default TransactionHistory","import React, { Component } from 'react';\nimport {Container, Alert} from 'react-bootstrap';\nimport TransactionComponent from './components/TransactionComponent';\nimport TransactionHistory from './components/TransactionHistory';\nimport axios from 'axios';\n\nimport './styles/global.css';\n\nclass App extends Component{\n    state = {\n        loading: true,\n        balance: null,\n        history: [],\n        error: null\n    }\n    async componentDidMount(){\n        try{\n            const { data } = await axios.get('/transactions');\n            const loading = false;\n            let history = [];\n            let balance = null;\n            if(data.length){\n                history = data;\n                balance = data[0].balance;\n            }\n            this.setState({\n                loading,\n                history,\n                balance\n            })\n        }catch(error){\n            this.setState(prevState =>({\n                ...prevState,\n                error: error.response.data.message,\n                loading: false\n            }))\n        }\n    }\n    sendTransaction = async(transaction)=> {\n        try{\n            const { data } = await axios.post('/transactions', { type: transaction.type, amount: parseFloat(transaction.amount)});\n            const history = [...this.state.history];\n            history.unshift(data);\n            this.setState(prevState =>({\n                ...prevState,\n                balance: data.balance,\n                history\n            }))\n        }catch(error){\n            this.setState(prevState =>({\n                ...prevState,\n                error: error.response.data.message\n            }))\n        }\n    }\n    render() {\n        const { loading, balance, history, error} = this.state;\n        return (\n        <Container>\n            {!loading && error && (\n            <Alert variant=\"danger\">\n                <Alert.Heading>You got an error!</Alert.Heading>\n                <p>\n                    {error}\n                </p>\n            </Alert>\n            )}\n            {!loading && <TransactionComponent sendTransaction={this.sendTransaction}/>}\n            {!loading && balance && (\n                <Alert variant=\"primary\">\n                    Account Balance: $ { parseFloat(balance) }\n                </Alert>\n            )}\n            {!loading && history.length > 0 && <TransactionHistory history={history}/>}\n            \n        </Container>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}